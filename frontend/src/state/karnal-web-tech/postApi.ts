import cookiesManager from "@/lib/service/cookies-axis/Cookies";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; // Ensure /react is imported

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export const karnal_Post_Api = createApi({
  reducerPath: "karnal_Post_Api",
  baseQuery: fetchBaseQuery({
    baseUrl: apiUrl,
    prepareHeaders: (headers) => {
      const token = cookiesManager.get("token"); // Get token from cookies
      if (token) {
        headers.set("Authorization", `Bearer ${token}`); // Set the Authorization header
      }
      return headers;
    },
    credentials: "include",
  }),
  tagTypes: ["Post-karnal"],
  endpoints: (builder) => ({
    addNewPost: builder.mutation<any, any>({
      query: (data) => {
        const formData = new FormData();
        for (let [key, value] of Object.entries(data)) {
          if (key === "images" && Array.isArray(value)) {
            // Assuming 'images' is an array of files, append each file separately
            value.forEach((file: any) => formData.append("images", file));
          } else if (value !== undefined && value !== null) {
            formData.append(key, value.toString());
          }
        }
        return {
          url: "v2/post/add",
          method: "POST",
          body: formData, // Use formData as body
        };
      },
      invalidatesTags: [{ type: "Post-karnal", id: "LIST" }],
    }),
    update: builder.mutation<any, any>({
      query: (data) => {
        const formData = new FormData();
        for (let [key, value] of Object.entries(data)) {
          if (key === "images" && Array.isArray(value)) {
            value.forEach((file: any) => formData.append("images", file));
          } else if (value !== undefined && value !== null) {
            formData.append(key, value.toString());
          }
        }
        return {
          url: "v2/post/update",
          method: "PUT",
          body: formData, // Use formData as body
        };
      },
      invalidatesTags: [{ type: "Post-karnal", id: "LIST" }],
    }),
    getSingle: builder.query<any, string>({
      query: (id: string) => ({
        url: `v2/post/data/${id}`,
        method: "GET",
      }),
      providesTags: [{ type: "Post-karnal", id: "LIST" }],
    }),
    deletePost: builder.mutation<any, any>({
      query: (id) => ({
        url: `v2/post/data/${id}`,
        method: "DELETE", // Use DELETE instead of PUT
      }),
      invalidatesTags: [{ type: "Post-karnal", id: "LIST" }],
    }),
    getAllPost: builder.query<
      any,
      {
        type?: string;
        rowsPerPage?: number;
        page?: number;
      } | void
    >({
      query: (filters) => {
        const params: Record<string, string | number | boolean> = {};
        // Add filters to the query parameters if they are present
        if (filters) {
          if (filters.rowsPerPage) {
            params.rowsPerPage = filters.rowsPerPage; // Convert number to string
          }
          if (filters.page) {
            params.page = filters.page; // Convert number to string
          }
        }

        return {
          url: "v2/post",
          params, // Use the dynamically constructed params
          method: "GET",
        };
      },
      providesTags: [{ type: "Post-karnal", id: "LIST" }],
    }),
  }),
});

// Correct hook name generated by createApi
export const {
  useAddNewPostMutation,
  useGetAllPostQuery,
  useGetSingleQuery,
  useUpdateMutation,
  useDeletePostMutation,
} = karnal_Post_Api;
