import cookiesManager from "@/lib/service/cookies-axis/Cookies";
import { categorie_form, categorie_list } from "@/types/categorie_type";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; // Ensure /react is imported

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export const categorieApi = createApi({
  reducerPath: "categorieApi",
  baseQuery: fetchBaseQuery({
    baseUrl: apiUrl,
    prepareHeaders: (headers) => {
      const token = cookiesManager.get("token"); // Get token from cookies
      if (token) {
        headers.set("Authorization", `Bearer ${token}`); // Set the Authorization header
      }
      return headers;
    },
    credentials: "include",
  }),
  tagTypes: ["Categorie"],
  endpoints: (builder) => ({
    addNewCategorie: builder.mutation<any, categorie_form>({
      query: (data) => {
        const formData = new FormData();
        if (data.images) {
          data.images.forEach((file: any) => formData.append("images", file)); // Assuming 'images' is an array of files
        }

        // Append other data fields
        formData.append("name", data.name);
        formData.append("description", data.description);
        formData.append("uuid", data.uuid);
        formData.append("status", data.status);

        return {
          url: "/categorie/add",
          method: "POST",
          body: formData, // Use formData as body
        };
      },
      invalidatesTags: [{ type: "Categorie", id: "LIST" }],
    }),
    update: builder.mutation<any, categorie_form>({
      query: (data) => {
        console.log(data)
        const formData = new FormData();
        if (data.images) {
          data.images.forEach((file: any) => formData.append("images", file)); // Assuming 'images' is an array of files
        }

        formData.append("name", data.name);
        if (data.id) {
          formData.append("id", data.id);
        }
        formData.append("description", data.description);
        formData.append("status", data.status);
        return {
          url: "/categorie/update",
          method: "POST",
          body: formData,
        };
      },
      invalidatesTags: [{ type: "Categorie", id: "LIST" }],
    }),
    action: builder.mutation({
      query: (data) => {
        return {
          url: `/categorie/remove/${data.id}`,
          method: "POST",
          body: data,
        };
      },
      invalidatesTags: [{ type: "Categorie", id: "LIST" }],
    }),
    getSingle: builder.mutation<categorie_list, string>({
      query: (id: string) => ({
        url: `/categorie/data/${id}`,
        method: "GET",
      }),
      invalidatesTags: [{ type: "Categorie", id: "LIST" }],
    }),

    getAllcategorie: builder.query<
      any,
      {
        is_delete?: string;
        keyword?: string;
        status?: string;
        rowsPerPage?: number;
        page?: number;
        is_active?: string;
      } | void
    >({
      query: (filters) => {
        // Initialize the query params object with the default value for isActive
        const params: Record<string, string | number | boolean> = {
          // is_active: filters.is_active, // Default to true
        };
        // Add filters to the query parameters if they are present
        if (filters) {
          if (filters.is_active && filters.is_active !== "final") {
            params.is_active = filters.is_active;
          }
          if (filters.is_delete) {
            params.is_delete = filters.is_delete;
          }

          if (filters.keyword) {
            params.keyword = filters.keyword;
          }
          if (filters.status && filters.status !== "all") {
            params.status = filters.status;
          }
          if (filters.rowsPerPage) {
            params.rowsPerPage = filters.rowsPerPage; // Convert number to string
          }
          if (filters.page) {
            params.page = filters.page; // Convert number to string
          }
        }

        return {
          url: "/categorie/all-categorie",
          params, // Use the dynamically constructed params
          method: "GET",
        };
      },
      providesTags: [{ type: "Categorie", id: "LIST" }],
    }),
  }),
});

// Correct hook name generated by createApi
export const {
  useAddNewCategorieMutation,
  useGetAllcategorieQuery,
  useUpdateMutation,
  useGetSingleMutation,
  useActionMutation,
} = categorieApi;
