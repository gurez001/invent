import cookiesManager from "@/lib/service/cookies-axis/Cookies";
import { Expences_List_Props, expenses_form } from "@/types/expense_type";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; // Ensure /react is imported

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export const expencesApi = createApi({
  reducerPath: "expencesApi",
  baseQuery: fetchBaseQuery({
    baseUrl: apiUrl,
    prepareHeaders: (headers) => {
      const token = cookiesManager.get("token"); // Get token from cookies
      if (token) {
        headers.set("Authorization", `Bearer ${token}`); // Set the Authorization header
      }
      return headers;
    },
    credentials: "include",
  }),
  tagTypes: ["Expences"],
  endpoints: (builder) => ({
    addNew: builder.mutation<any, expenses_form>({
      query: (data) => {
        const formData = new FormData();
        for (let [key, value] of Object.entries(data)) {
          if (key === "images" && Array.isArray(value)) {
            // Assuming 'images' is an array of files, append each file separately
            value.forEach((file: any) => formData.append("images", file));
          } else {
            formData.append(key, value === undefined ? "" : value);
            // For all other fields, just append key-value pairs
          }
        }

        return {
          url: "/expense/add",
          method: "POST",
          body: formData, // Use formData as body
        };
      },
      invalidatesTags: [{ type: "Expences", id: "LIST" }],
    }),
    update: builder.mutation<void, expenses_form>({
      query: (data) => {
        const formData = new FormData();
        for (let [key, value] of Object.entries(data)) {
            if (key === "images" && Array.isArray(value)) {
              // Assuming 'images' is an array of files, append each file separately
              value.forEach((file: any) => formData.append("images", file));
            } else {
              formData.append(key, value === undefined ? "" : value);
              // For all other fields, just append key-value pairs
            }
          }
        return {
          url: "/expense/update",
          method: "POST",
          body: formData,
        };
      },
      invalidatesTags: [{ type: "Expences", id: "LIST" }],
    }),
    action: builder.mutation({
      query: (data) => {
        return {
          url: `/expense/remove/${data.id}`,
          method: "POST",
          body: data,
        };
      },
      invalidatesTags: [{ type: "Expences", id: "LIST" }],
    }),
    getSingle: builder.mutation<Expences_List_Props, string>({
      query: (id: string) => ({
        url: `/expense/data/${id}`,
        method: "GET",
      }),
      invalidatesTags: [{ type: "Expences", id: "LIST" }],
    }),

    getAll: builder.query<
      any,
      {
        is_delete?: string;
        keyword?: string;
        status?: string;
        rowsPerPage?: number;
        page?: number;
        is_active?: string;
      } | void
    >({
      query: (filters) => {
        const params: Record<string, string | number | boolean> = {};
        if (filters) {
          if (filters.is_active && filters.is_active !== "final") {
            params.is_active = filters.is_active;
          }
          if (filters.is_delete) {
            params.is_delete = filters.is_delete;
          }

          if (filters.keyword) {
            params.keyword = filters.keyword;
          }
          if (filters.status && filters.status !== "all") {
            params.status = filters.status;
          }
          if (filters.rowsPerPage) {
            params.rowsPerPage = filters.rowsPerPage; // Convert number to string
          }
          if (filters.page) {
            params.page = filters.page; // Convert number to string
          }
        }

        return {
          url: "/expense/all-expense",
          params, // Use the dynamically constructed params
          method: "GET",
        };
      },
      providesTags: [{ type: "Expences", id: "LIST" }],
    }),
  }),
});

// Correct hook name generated by createApi
export const { useAddNewMutation, useGetAllQuery,useUpdateMutation, useActionMutation,useGetSingleMutation } =
  expencesApi;
